#!/usr/bin/env python

import arches
import argparse
import codecs
import os
import sys

from importlib import import_module
from django.core.management.templates import TemplateCommand
from django.core.management.base import CommandError


os.environ.setdefault("DJANGO_SETTINGS_MODULE", "arches.settings")
here = os.path.abspath(os.path.dirname(__file__))
COMMANDS = {}


class ArchesAppCommand(TemplateCommand):
    help = (
        "Creates a Django application directory structure for the given "
        "application name in the current directory or optionally in the "
        "given directory."
    )
    missing_args_message = "You must provide a valid name."

    def handle(self, options):
        app_name, target = options.pop('name'), options.pop('directory')
        self.validate_name(app_name, "app")

        # Check that the app_name cannot be imported.
        try:
            import_module(app_name)
        except ImportError:
            pass
        else:
            raise CommandError(
                "%r conflicts with the name of an existing "
                "Python module and cannot be used as an "
                "application or project name. Please try "
                "another name." %
                app_name
            )

        super(ArchesAppCommand, self).handle('app', app_name, target, **options)

def command_startapp(args):
    cmd = ArchesAppCommand()
    options = vars(args)
    cmd.handle(options)

parent_parser = argparse.ArgumentParser(add_help=False)

parser = argparse.ArgumentParser(
    prog='arches',
    description='Manage Arches-based Applications',
    parents=[parent_parser],
    formatter_class=argparse.ArgumentDefaultsHelpFormatter
)

subparsers = parser.add_subparsers(title='available commands', dest='command')
subparsers.required = True


parser_startapp = subparsers.add_parser(
    'startapp',
    help="Create the scaffolding for a new Arches application",
)

parser_startapp.add_argument(
    'name',
    type=str,
    help='name of your new application'
)

parser_startapp.add_argument(
    '-d', '--directory',
    help='destination directory of your new project',
)

parser_startapp.add_argument(
    '-t', '--template',
    help="Provides the path to a directory with a custom app template file, or a path to an uncompressed archive, a compressed archive, or a URL containing the app template files.",
    type=str,
    default=os.path.join(os.path.dirname(arches.__file__), 'install', 'arches-app-templates')
)

parser_startapp.add_argument(
    '-e', '--extension',
    dest='extensions',
    help='Specifies which file extensions in the app template should be rendered with the template engine. Defaults to py.',
    type=str,
    default='py'
)

parser_startapp.add_argument(
    '-n', '--name',
    dest='files',
    help='Specifies which files in the app template (in addition to those matching --extension) should be rendered with the template engine.',
    type=str,
    default='',
)

parser.add_argument(
    '-v', '--verbosity', 
    action='store', 
    dest='verbosity', 
    default='1',
    type=int, 
    choices=[0, 1, 2, 3],
    help='Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output'
)

try:
    # Python 3
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.buffer)
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.buffer)
except AttributeError:
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout)
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr)


class CommandError(Exception):
    pass


COMMANDS['startapp'] = command_startapp


def main(argv=None):
    if argv is not None:
        args = parser.parse_args(argv)
    else:
        args = parser.parse_args()

    try:
        COMMANDS[args.command](args)
    except CommandError as e:
        print(str(e))
        sys.exit(1)


if __name__ == '__main__':
    main()